<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.mmanager.dao.MQTT.MqPageMapper">
    <resultMap id="mqPage" type="cn.mmanager.model.dto.MqPageDto">
        <id column="id" property="id"/>
        <result column="page_name" property="pageName"/>
        <result column="page_url" property="pageUrl"/>
        <result column="nmqs_id" property="nmqsTokenID"/>
        <result column="status" property="status"/>
        <association property="customer" javaType="cn.mmanager.model.pojo.Customer">
            <result column="customer_id" property="id"/>
            <result column="customer_name" property="name"/>
        </association>
        <association property="settings" javaType="cn.mmanager.model.pojo.NmqsToken">
            <result column="name" property="name"/>
            <result column="token" property="token"/>
            <result column="mqtt_server" property="mqttServer"/>
            <result column="mqtt_port" property="mqttPort"/>
            <result column="mqtt_username" property="mqttUsername"/>
            <result column="mqtt_password" property="mqttPassword"/>
            <result column="mqtt_sendTopic" property="mqttSendTopic"/>
            <result column="mqtt_receiveTopic" property="mqttReceiveTopic"/>
            <result column="mqtt_qos" property="mqttQos"/>
        </association>
        <collection property="mqParams" javaType="arraylist" ofType="MQParam" select="selectParamsByPageId" column="id"/>
    </resultMap>

    <resultMap id="select" type="MQPage">
        <id column="id" property="id"/>
        <result column="page_name" property="pageName"/>
        <result column="page_url" property="pageUrl"/>
        <result column="nmqs_id" property="nmqsTokenID"/>
        <result column="token" property="token"/>
        <result column="status" property="status"/>
        <association property="customer" javaType="cn.mmanager.model.pojo.Customer">
            <result column="customer_id" property="id"/>
            <result column="customer_name" property="name"/>
        </association>
    </resultMap>

    <select id="select" parameterType="string" resultType="MQPage" resultMap="select">
        SELECT
        mq_page.*,
        customer.id AS customer_id,
        customer.name AS customer_name,
        nmqs.token AS token
        FROM
        mq_page
        LEFT JOIN mq_customer_page ON mq_page.id = mq_customer_page.page_id
        LEFT JOIN mq_customer customer ON mq_customer_page.customer_id = customer.id
        LEFT JOIN mq_nmqs_token nmqs ON nmqs.id = mq_page.nmqs_id
        <where>
            <if test="id != null">
                mq_page.id = #{id}
            </if>
            <if test="pageName != null">
                and page_name = #{pageName}
            </if>
            <if test="pageUrl != null">
                and page_url = #{pageUrl}
            </if>
            <if test="nmqsTokenID != null">
                and nmqs_id = #{nmqsTokenID}
            </if>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="customerID != null">
                and customer.id = #{customerID}
            </if>
        </where>
    </select>

    <insert id="insert" parameterType="MQPage" useGeneratedKeys="true" keyProperty="id">
        insert into mq_page (page_name, page_url, nmqs_id, status)
        values (#{pageName}, #{pageUrl}, #{nmqsTokenID}, #{status})
    </insert>

    <update id="update" parameterType="MQPageDto">
        update mq_page
        <set>
            <if test="pageName != null">
                page_name = #{pageName},
            </if>
            <if test="pageUrl != null">
                page_url = #{pageUrl},
            </if>
            <if test="nmqsTokenID != null">
                nmqs_id = #{nmqsTokenID},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="deleteById" parameterType="long">
        delete from mq_page where id = #{id}
    </delete>

    <select id="selectById" resultType="MqPageDto" resultMap="mqPage">
        select
        page.*,
        nmqs.name,
        nmqs.token,
        nmqs.mqtt_server,
        nmqs.mqtt_port,
        nmqs.mqtt_username,
        nmqs.mqtt_password,
        nmqs.mqtt_sendTopic,
        nmqs.mqtt_receiveTopic,
        nmqs.mqtt_qos,
        customer.id as customer_id,
        customer.name as customer_name
        from mq_page page
        left join mq_customer_page mcp on page.id = mcp.page_id
        left join mq_customer customer on mcp.customer_id = customer.id
        left join mq_nmqs_token nmqs on page.nmqs_id = nmqs.id
        where page.id = #{id}
    </select>

    <select id="selectParamsByPageId" resultType="MQParam" parameterType="long">
        select mq_param.id,mq_param.message,mq_param.button from mq_param
        left join mq_page_param on mq_param.id = mq_page_param.param_id
        where mq_page_param.page_id = #{id}
    </select>

    <insert id="insertPage_Customer" parameterType="long">
        insert into mq_customer_page (customer_id, page_id)
        values (#{customerId}, #{pageId})
    </insert>

    <update id="updatePage_Customer" parameterType="long">
        update mq_customer_page
        <set>
            <if test="customerId != null">
                customer_id = #{customerId},
            </if>
        </set>
        where page_id = #{pageId}
    </update>

    <delete id="deletePage_Customer" parameterType="long">
        delete from mq_customer_page where page_id = #{pageId}
    </delete>

    <select id="selectByURL" resultMap="mqPage" parameterType="string">
        select * from mq_page where page_url = #{url}
    </select>

    <select id="count" resultType="int" parameterType="int">
        select count(*) from mq_page
    </select>
</mapper>
